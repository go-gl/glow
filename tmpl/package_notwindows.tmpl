//glow:keepspace
// +build !windows

// Code generated by glow (https://github.com/go-gl/glow). DO NOT EDIT.

package {{.Name}}
//glow:rmspace

{{define "paramsCDecl"}}{{range $i, $p := .}}{{if ne $i 0}}, {{end}}{{$p.Type.CType}} {{$p.CName}}{{end}}{{end}}
{{define "paramsCCall"}}{{range $i, $p := .}}{{if ne $i 0}}, {{end}}{{if $p.Type.IsDebugProc}}glowCDebugCallback{{else}}{{$p.CName}}{{end}}{{end}}{{end}}

{{define "paramsGoDecl"}}{{range $i, $p := .}}{{if ne $i 0}}, {{end}}{{$p.GoName}} {{$p.Type.GoType}}{{end}}{{end}}
{{define "paramsGoCall"}}{{range $i, $p := .}}{{if ne $i 0}}, {{end}}{{$p.Type.ConvertGoToC $p.GoName}}{{end}}{{end}}

// #cgo darwin        LDFLAGS: -framework OpenGL
// #cgo linux freebsd LDFLAGS: -lGL
//
// #ifndef APIENTRY
// #define APIENTRY
// #endif
// #ifndef APIENTRYP
// #define APIENTRYP APIENTRY *
// #endif
// #ifndef GLAPI
// #define GLAPI extern
// #endif
//
// {{range .Typedefs}}
// {{replace .CTypedef "\n" "\n// " -1}}
// {{end}}
//
// {{if .HasDebugCallbackFeature}}
// extern void glowDebugCallback_{{.UniqueName}}(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);
// static void APIENTRY glowCDebugCallback(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam) {
//   glowDebugCallback_{{.UniqueName}}(source, type, id, severity, length, message, userParam);
// }
// {{end}}
//
// {{range .Functions}}
// typedef {{.Return.CType}} (APIENTRYP GP{{toUpper .GoName}})({{template "paramsCDecl" .Parameters}});
// {{end}}
//
// {{range .Functions}}
// static {{.Return.CType}} glow{{.GoName}}(GP{{toUpper .GoName}} fnptr{{if ge (len .Parameters) 1}}, {{end}}{{template "paramsCDecl" .Parameters}}) {
//   {{if not .Return.IsVoid}}return {{end}}(*fnptr)({{template "paramsCCall" .Parameters}});
// }
// {{end}}
//
import "C"
import (
	{{if .HasRequiredFunctions}}
	"errors"
	{{end}}
	"unsafe"
)

var (
	{{range .Functions}}
	gp{{.GoName}} C.GP{{toUpper .GoName}}
	{{end}}
)

// Helper functions
func boolToInt(b bool) int {
	if b { return 1 }
	return 0
}

{{define "bridgeCall"}}C.glow{{.GoName}}(gp{{.GoName}}{{if ge (len .Parameters) 1}}, {{end}}{{template "paramsGoCall" .Parameters}}){{end}}
{{range .Functions}}
{{.Comment}}
func {{.GoName}}({{template "paramsGoDecl" .Parameters}}){{if not .Return.IsVoid}} {{.Return.GoType}}{{end}} {
	{{range .Parameters}}
	{{if .Type.IsDebugProc}}userDebugCallback = {{.GoName}}{{end}}
	{{end}}
	{{if .Return.IsVoid}}{{template "bridgeCall" .}}
	{{else}}
	ret := {{template "bridgeCall" .}}
	return {{.Return.ConvertCToGo "ret"}}
	{{end}}
}
{{end}}


// InitWithProcAddrFunc intializes the package using the specified OpenGL
// function pointer loading function. For more cases Init should be used
// instead.
func InitWithProcAddrFunc(getProcAddr func(name string) unsafe.Pointer) error {
	{{range .Functions}}
	gp{{.GoName}} = (C.GP{{toUpper .GoName}})(getProcAddr("{{.Name}}"))
	{{if .Required}}
	if gp{{.GoName}} == nil {
		return errors.New("{{.Name}}")
	}
	{{end}}
	{{end}}
	return nil
}
