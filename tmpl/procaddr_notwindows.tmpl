//glow:keepspace
// +build !windows

// Code generated by glow (https://github.com/go-gl/glow). DO NOT EDIT.

// This file implements GlowGetProcAddress for every supported platform. The
// correct version is chosen automatically based on build tags:
//
// darwin: CGL
// linux freebsd: GLX
//
// Use of EGL instead of the platform's default (listed above) is made possible
// via the "egl" build tag.
//
// It is also possible to install your own function outside this package for
// retrieving OpenGL function pointers, to do this see InitWithProcAddrFunc.

package {{.Name}}
//glow:rmspace

/*
#cgo darwin CFLAGS: -DTAG_DARWIN
#cgo darwin LDFLAGS: -framework OpenGL

#cgo linux freebsd CFLAGS: -DTAG_POSIX
#cgo !egl,linux !egl,freebsd pkg-config: gl

#cgo egl,linux egl,freebsd CFLAGS: -DTAG_EGL
#cgo egl,linux egl,freebsd pkg-config: egl


// Check the EGL tag first as it takes priority over the platform's default
// configuration of WGL/GLX/CGL.
#if defined(TAG_EGL)

	#include <stdlib.h>
	#include <EGL/egl.h>
	void* GlowGetProcAddress_{{.UniqueName}}(const char* name) {
		return eglGetProcAddress(name);
	}

#elif defined(TAG_DARWIN)

	#include <stdlib.h>
	#include <dlfcn.h>
	void* GlowGetProcAddress_{{.UniqueName}}(const char* name) {
		return dlsym(RTLD_DEFAULT, name);
	}

#elif defined(TAG_POSIX)

	#include <stdlib.h>
	#include <GL/glx.h>
	void* GlowGetProcAddress_{{.UniqueName}}(const char* name) {
		return glXGetProcAddress((const GLubyte *) name);
	}

#endif
*/
import "C"

import "unsafe"

func getProcAddress(namea string) unsafe.Pointer {
	cname := C.CString(namea)
	defer C.free(unsafe.Pointer(cname))
	return C.GlowGetProcAddress_{{.UniqueName}}(cname)
}
